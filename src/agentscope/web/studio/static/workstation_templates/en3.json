{
  "drawflow": {
    "Home": {
      "data": {
        "2": {
          "id": 2,
          "name": "dashscope_chat",
          "data": {
            "args": {
              "config_name": "qwen",
              "model_name": "qwen-max",
              "api_key": "",
              "temperature": 0,
              "seed": 0,
              "model_type": "dashscope_chat",
              "messages_key": "input"
            }
          },
          "class": "dashscope_chat",
          "html": "\n        <div>\n          <div class=\"title-box\"><i class=\"fas fa-brain\"></i> DashScope Chat\n          <span class=\"toggle-arrow\">â–²</span> </div>\n          <div class=\"box\">\n            <div class=\"readme\">DashScope Chat Configurations (Your API key will NOT be stored and exposed to the website\n                maintainer)</div><br>\n            <label> Config Name </label>\n            <input type=\"text\" df-args-config_name placeholder=\"qwen\"><br>\n            <label> Model Name</label>\n            <input type=\"text\" list=\"dashscope_chat-model-names\" df-args-model_name><br>\n            <datalist id=\"dashscope_chat-model-names\">\n              <option value=\"qwen-turbo\">\n              <option value=\"qwen-plus\">\n              <option value=\"qwen-max\">\n              <option value=\"qwen-max-1201\">\n            </datalist>\n            <label> API key</label>\n            <input type=\"text\" df-args-api_key><br>\n            <label> Temperature </label>\n            <input type=\"number\" df-args-temperature placeholder=0 min=\"0\" max=\"2\" step=\"0.1\"><br>\n            <label> Seed </label>\n            <input type=\"number\" df-args-seed placeholder=0 min=\"0\">\n          </div>\n        </div>\n        ",
          "typenode": false,
          "inputs": {},
          "outputs": {},
          "pos_x": 351,
          "pos_y": 113
        },
        "3": {
          "id": 3,
          "name": "WhileLoopPipeline",
          "data": {
            "elements": [
              "4"
            ],
            "args": {
              "condition_func": "lambda *args: True"
            }
          },
          "class": "GROUP",
          "html": "\n          <div>\n            <div class=\"title-box\"><i class=\"fas fa-project-diagram\"></i>WhileLoopPipeline\n                <span class=\"toggle-arrow\">â–²</span></div>\n            <div class=\"box\">\n                <div class=\"readme\">A template pipeline for implementing control flow like while-loop</div>\n                <p>Condition Function</p>\n                <input type=\"text\" df-args-condition_func style=\"width: 450px\"><br>\n                <div class=\"placeholder\"></div>\n            </div>\n          </div>\n          ",
          "typenode": false,
          "inputs": {
            "input_1": {
              "connections": []
            }
          },
          "outputs": {
            "output_1": {
              "connections": []
            }
          },
          "pos_x": 699,
          "pos_y": 151
        },
        "4": {
          "id": 4,
          "name": "SequentialPipeline",
          "data": {
            "elements": [
              "6",
              "5"
            ]
          },
          "class": "GROUP",
          "html": "\n          <div>\n            <div class=\"title-box\"><i class=\"fas fa-project-diagram\"></i>SequentialPipeline\n                <span class=\"toggle-arrow\">â–²</span></div>\n            <div class=\"box\">\n                <div class=\"readme\">A template pipeline for implementing sequential logic (<b>from top to bottom</b>)</div>\n                <div class=\"placeholder\"></div>\n            </div>\n          </div>\n          ",
          "typenode": false,
          "inputs": {
            "input_1": {
              "connections": []
            }
          },
          "outputs": {
            "output_1": {
              "connections": []
            }
          },
          "pos_x": 750,
          "pos_y": 217
        },
        "5": {
          "id": 5,
          "name": "UserAgent",
          "data": {
            "args": {
              "name": "User"
            }
          },
          "class": "UserAgent",
          "html": "\n          <div>\n            <div class=\"title-box\"><i class=\"fas fa-robot\"></i>UserAgent\n            <button class=\"button copy-button\">Copy</button>\n            <span class=\"toggle-arrow\">â–²</div>\n            <div class=\"box\">\n            <div class=\"readme\">\n            <div>Node ID: <span class=\"node-id\">5</span></div>\n            A proxy agent for user</div>\n              <p>Name</p>\n              <input type=\"text\" df-args-name placeholder=\"User\"><br>\n            </div>\n          </div>\n          ",
          "typenode": false,
          "inputs": {
            "input_1": {
              "connections": []
            }
          },
          "outputs": {
            "output_1": {
              "connections": []
            }
          },
          "pos_x": 766,
          "pos_y": 361
        },
        "6": {
          "id": 6,
          "name": "DialogAgent",
          "data": {
            "args": {
              "name": "Assistant",
              "sys_prompt": "You are a helpful assistant.",
              "model_config_name": "qwen"
            }
          },
          "class": "DialogAgent",
          "html": "\n          <div>\n            <div class=\"title-box\"><i class=\"fas fa-robot\"></i>DialogAgent\n            <button class=\"button copy-button\">Copy</button>\n                      <span class=\"toggle-arrow\">â–²</span></div>\n            <div class=\"box\">\n              <div class=\"readme\">\n              <div>Node ID: <span class=\"node-id\">6</span></div>\n              Agent for dialog\n                </div>\n              <p>Name</p>\n              <input type=\"text\" df-args-name placeholder=\"Assistant\"><br>\n              <p>System prompt</p>\n              <input type=\"text\" df-args-sys_prompt placeholder=\"You're an assistant.\"><br>\n              <p>Model config name</p>\n              <input type=\"text\" df-args-model_config_name placeholder=\"gpt-3.5-turbo\">\n            </div>\n          </div>\n          ",
          "typenode": false,
          "inputs": {
            "input_1": {
              "connections": []
            }
          },
          "outputs": {
            "output_1": {
              "connections": []
            }
          },
          "pos_x": 985,
          "pos_y": 468
        },
        "1": {
          "id": 1,
          "name": "readme",
          "data": {},
          "class": "welcome",
          "html": "\n        <div class=\"title-box\"><i class=\"fa fa-book\"></i> README <span class=\"toggle-arrow\">â–²</span> </div>\n        <div class=\"box-highlight\">\n      ðŸ“– This is a example of how to program a user-agent conversation in AgentScope. <br><br> <div class=\"modules-info\"><h4>Modules Used:</h4><ul><li><span class=\"highlight-module\" onclick=\"editor.selectNode(2);\">DashScope Chat:</span><br> - Each application must contain a model configured.</li><li><span class=\"highlight-module\" onclick=\"editor.selectNode(3);\">WhileLoopPipeline:</span><br> - Designed to perform repetitive operations.</li><li><span class=\"highlight-module\" onclick=\"editor.selectNode(4);\">SequentialPipeline:</span><br> - Make the message passes in a predefined, sequential order among agents.</li><li><span class=\"highlight-module\" onclick=\"editor.selectNode(5);\">UserAgent:</span><br> - Represents a user in a application.</li><li><span class=\"highlight-module\" onclick=\"editor.selectNode(6);\">DialogAgent:</span><br> - Agent for dialog in an application.</li></ur></div>For more details, please see <a href=\"https://github.com/modelscope/agentscope/tree/main/examples/conversation_basic\" target=\"_blank\">here</a>.  </div>\n      </div>\n      ",
          "typenode": false,
          "inputs": {},
          "outputs": {},
          "pos_x": 68,
          "pos_y": 67
        }
      }
    }
  }
}